const http = require('http');
const fs = require('fs');
const path = require('path');
const { promisify } = require('util');

// Convert callback-based functions to promise-based
const mkdir = promisify(fs.mkdir);
const writeFile = promisify(fs.writeFile);
const exists = promisify(fs.exists);

// Create directory if it doesn't exist
const terminalCaptureDir = path.join(__dirname, '..', 'terminal_captures');
if (!fs.existsSync(terminalCaptureDir)) {
  fs.mkdirSync(terminalCaptureDir, { recursive: true });
}

// Function to make HTTP requests and save the response
function fetchPage(url, filename) {
  return new Promise((resolve, reject) => {
    http.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`Failed to fetch ${url}: ${response.statusCode}`));
        return;
      }

      let data = '';
      response.on('data', (chunk) => {
        data += chunk;
      });

      response.on('end', async () => {
        try {
          await writeFile(path.join(terminalCaptureDir, filename), data);
          console.log(`Saved ${url} to ${filename}`);
          resolve(data);
        } catch (error) {
          reject(error);
        }
      });
    }).on('error', (error) => {
      reject(error);
    });
  });
}

// Main function to capture pages
async function capturePages() {
  console.log('Starting terminal-based HTML capture...');
  
  const pagesToCapture = [
    { url: 'http://localhost:3000/', filename: 'main_page.html' },
    { url: 'http://localhost:3000/email-preferences.html', filename: 'email_preferences.html' },
    { url: 'http://localhost:3000/about.html', filename: 'about.html' },
    { url: 'http://localhost:3000/help.html', filename: 'help.html' }
  ];
  
  // Create a README file explaining what these files are
  const readmeContent = `# Terminal Captures

This directory contains HTML captures of the Leader-Follower Identity Tracker (LFIT) application.
These captures were made using a simple HTTP client without requiring a browser.

## Files

${pagesToCapture.map(page => `- ${page.filename}: Captured from ${page.url}`).join('\n')}

## Note

These captures only include the initial HTML of each page and do not include any dynamic content
that would normally be generated by JavaScript after the page loads.
`;

  await writeFile(path.join(terminalCaptureDir, 'README.md'), readmeContent);
  console.log('Created README.md file');
  
  // Capture each page
  for (const page of pagesToCapture) {
    try {
      await fetchPage(page.url, page.filename);
    } catch (error) {
      console.error(`Error capturing ${page.url}: ${error.message}`);
    }
  }
  
  console.log(`\nAll captures completed. Files saved to: ${terminalCaptureDir}`);
}

// Run the capture function
capturePages().catch(error => {
  console.error('Error in capture process:', error);
}); 